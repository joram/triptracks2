/**
 * FastAPI
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AccessKeyRequest from '../model/AccessKeyRequest';
import Forecast from '../model/Forecast';
import HTTPValidationError from '../model/HTTPValidationError';
import PackingListRequest from '../model/PackingListRequest';
import TripPlanRequest from '../model/TripPlanRequest';

/**
* Default service.
* @module triptracks/DefaultApi
* @version 0.1.0
*/
export default class DefaultApi {

    /**
    * Constructs a new DefaultApi. 
    * @alias module:triptracks/DefaultApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Create Access Key
     * @param {module:model/AccessKeyRequest} accessKeyRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object} and HTTP response
     */
    createAccessKeyApiV0AccessKeyPostWithHttpInfo(accessKeyRequest) {
      let postBody = accessKeyRequest;
      // verify the required parameter 'accessKeyRequest' is set
      if (accessKeyRequest === undefined || accessKeyRequest === null) {
        throw new Error("Missing the required parameter 'accessKeyRequest' when calling createAccessKeyApiV0AccessKeyPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/api/v0/access_key', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Create Access Key
     * @param {module:model/AccessKeyRequest} accessKeyRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object}
     */
    createAccessKeyApiV0AccessKeyPost(accessKeyRequest) {
      return this.createAccessKeyApiV0AccessKeyPostWithHttpInfo(accessKeyRequest)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Create Packing List
     * @param {String} accessKey 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object} and HTTP response
     */
    createPackingListApiV0PackingListPostWithHttpInfo(accessKey) {
      let postBody = null;
      // verify the required parameter 'accessKey' is set
      if (accessKey === undefined || accessKey === null) {
        throw new Error("Missing the required parameter 'accessKey' when calling createPackingListApiV0PackingListPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'access-key': accessKey
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/api/v0/packing_list', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Create Packing List
     * @param {String} accessKey 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object}
     */
    createPackingListApiV0PackingListPost(accessKey) {
      return this.createPackingListApiV0PackingListPostWithHttpInfo(accessKey)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Create Trip Plan
     * @param {String} accessKey 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object} and HTTP response
     */
    createTripPlanApiV0TripPlanPostWithHttpInfo(accessKey) {
      let postBody = null;
      // verify the required parameter 'accessKey' is set
      if (accessKey === undefined || accessKey === null) {
        throw new Error("Missing the required parameter 'accessKey' when calling createTripPlanApiV0TripPlanPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'access-key': accessKey
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/api/v0/trip_plan', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Create Trip Plan
     * @param {String} accessKey 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object}
     */
    createTripPlanApiV0TripPlanPost(accessKey) {
      return this.createTripPlanApiV0TripPlanPostWithHttpInfo(accessKey)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Forecast
     * @param {Object} opts Optional parameters
     * @param {String} [start = '2022-2-10')] 
     * @param {String} [end = '2022-2-12')] 
     * @param {Number} [lat = 48.4284)] 
     * @param {Number} [lng = -123.3656)] 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Forecast} and HTTP response
     */
    forecastApiV0ForecastGetWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'start': opts['start'],
        'end': opts['end'],
        'lat': opts['lat'],
        'lng': opts['lng']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Forecast;
      return this.apiClient.callApi(
        '/api/v0/forecast', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Forecast
     * @param {Object} opts Optional parameters
     * @param {String} opts.start  (default to '2022-2-10')
     * @param {String} opts.end  (default to '2022-2-12')
     * @param {Number} opts.lat  (default to 48.4284)
     * @param {Number} opts.lng  (default to -123.3656)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Forecast}
     */
    forecastApiV0ForecastGet(opts) {
      return this.forecastApiV0ForecastGetWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get Packing List
     * @param {String} packingListId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object} and HTTP response
     */
    getPackingListApiV0PackingListPackingListIdGetWithHttpInfo(packingListId) {
      let postBody = null;
      // verify the required parameter 'packingListId' is set
      if (packingListId === undefined || packingListId === null) {
        throw new Error("Missing the required parameter 'packingListId' when calling getPackingListApiV0PackingListPackingListIdGet");
      }

      let pathParams = {
        'packing_list_id': packingListId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/api/v0/packing_list/{packing_list_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get Packing List
     * @param {String} packingListId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object}
     */
    getPackingListApiV0PackingListPackingListIdGet(packingListId) {
      return this.getPackingListApiV0PackingListPackingListIdGetWithHttpInfo(packingListId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get Packing Lists
     * @param {String} accessKey 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object} and HTTP response
     */
    getPackingListsApiV0PackingListsGetWithHttpInfo(accessKey) {
      let postBody = null;
      // verify the required parameter 'accessKey' is set
      if (accessKey === undefined || accessKey === null) {
        throw new Error("Missing the required parameter 'accessKey' when calling getPackingListsApiV0PackingListsGet");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'access-key': accessKey
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/api/v0/packing_lists', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get Packing Lists
     * @param {String} accessKey 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object}
     */
    getPackingListsApiV0PackingListsGet(accessKey) {
      return this.getPackingListsApiV0PackingListsGetWithHttpInfo(accessKey)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get Trip Plan
     * @param {String} tripPlanId 
     * @param {String} accessKey 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object} and HTTP response
     */
    getTripPlanApiV0TripPlanTripPlanIdGetWithHttpInfo(tripPlanId, accessKey) {
      let postBody = null;
      // verify the required parameter 'tripPlanId' is set
      if (tripPlanId === undefined || tripPlanId === null) {
        throw new Error("Missing the required parameter 'tripPlanId' when calling getTripPlanApiV0TripPlanTripPlanIdGet");
      }
      // verify the required parameter 'accessKey' is set
      if (accessKey === undefined || accessKey === null) {
        throw new Error("Missing the required parameter 'accessKey' when calling getTripPlanApiV0TripPlanTripPlanIdGet");
      }

      let pathParams = {
        'trip_plan_id': tripPlanId
      };
      let queryParams = {
      };
      let headerParams = {
        'access-key': accessKey
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/api/v0/trip_plan/{trip_plan_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get Trip Plan
     * @param {String} tripPlanId 
     * @param {String} accessKey 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object}
     */
    getTripPlanApiV0TripPlanTripPlanIdGet(tripPlanId, accessKey) {
      return this.getTripPlanApiV0TripPlanTripPlanIdGetWithHttpInfo(tripPlanId, accessKey)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get Trip Plans
     * @param {String} accessKey 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object} and HTTP response
     */
    getTripPlansApiV0TripPlansGetWithHttpInfo(accessKey) {
      let postBody = null;
      // verify the required parameter 'accessKey' is set
      if (accessKey === undefined || accessKey === null) {
        throw new Error("Missing the required parameter 'accessKey' when calling getTripPlansApiV0TripPlansGet");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'access-key': accessKey
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/api/v0/trip_plans', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get Trip Plans
     * @param {String} accessKey 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object}
     */
    getTripPlansApiV0TripPlansGet(accessKey) {
      return this.getTripPlansApiV0TripPlansGetWithHttpInfo(accessKey)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Remove Packing List
     * @param {String} packingListId 
     * @param {String} accessKey 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object} and HTTP response
     */
    removePackingListApiV0PackingListPackingListIdDeleteWithHttpInfo(packingListId, accessKey) {
      let postBody = null;
      // verify the required parameter 'packingListId' is set
      if (packingListId === undefined || packingListId === null) {
        throw new Error("Missing the required parameter 'packingListId' when calling removePackingListApiV0PackingListPackingListIdDelete");
      }
      // verify the required parameter 'accessKey' is set
      if (accessKey === undefined || accessKey === null) {
        throw new Error("Missing the required parameter 'accessKey' when calling removePackingListApiV0PackingListPackingListIdDelete");
      }

      let pathParams = {
        'packing_list_id': packingListId
      };
      let queryParams = {
      };
      let headerParams = {
        'access-key': accessKey
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/api/v0/packing_list/{packing_list_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Remove Packing List
     * @param {String} packingListId 
     * @param {String} accessKey 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object}
     */
    removePackingListApiV0PackingListPackingListIdDelete(packingListId, accessKey) {
      return this.removePackingListApiV0PackingListPackingListIdDeleteWithHttpInfo(packingListId, accessKey)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Remove Trip Plan
     * @param {String} tripPlanId 
     * @param {String} accessKey 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object} and HTTP response
     */
    removeTripPlanApiV0TripPlanTripPlanIdDeleteWithHttpInfo(tripPlanId, accessKey) {
      let postBody = null;
      // verify the required parameter 'tripPlanId' is set
      if (tripPlanId === undefined || tripPlanId === null) {
        throw new Error("Missing the required parameter 'tripPlanId' when calling removeTripPlanApiV0TripPlanTripPlanIdDelete");
      }
      // verify the required parameter 'accessKey' is set
      if (accessKey === undefined || accessKey === null) {
        throw new Error("Missing the required parameter 'accessKey' when calling removeTripPlanApiV0TripPlanTripPlanIdDelete");
      }

      let pathParams = {
        'trip_plan_id': tripPlanId
      };
      let queryParams = {
      };
      let headerParams = {
        'access-key': accessKey
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/api/v0/trip_plan/{trip_plan_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Remove Trip Plan
     * @param {String} tripPlanId 
     * @param {String} accessKey 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object}
     */
    removeTripPlanApiV0TripPlanTripPlanIdDelete(tripPlanId, accessKey) {
      return this.removeTripPlanApiV0TripPlanTripPlanIdDeleteWithHttpInfo(tripPlanId, accessKey)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update Packing List
     * @param {module:model/PackingListRequest} packingListRequest 
     * @param {String} packingListId 
     * @param {String} accessKey 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object} and HTTP response
     */
    updatePackingListApiV0PackingListPackingListIdPostWithHttpInfo(packingListRequest, packingListId, accessKey) {
      let postBody = packingListRequest;
      // verify the required parameter 'packingListRequest' is set
      if (packingListRequest === undefined || packingListRequest === null) {
        throw new Error("Missing the required parameter 'packingListRequest' when calling updatePackingListApiV0PackingListPackingListIdPost");
      }
      // verify the required parameter 'packingListId' is set
      if (packingListId === undefined || packingListId === null) {
        throw new Error("Missing the required parameter 'packingListId' when calling updatePackingListApiV0PackingListPackingListIdPost");
      }
      // verify the required parameter 'accessKey' is set
      if (accessKey === undefined || accessKey === null) {
        throw new Error("Missing the required parameter 'accessKey' when calling updatePackingListApiV0PackingListPackingListIdPost");
      }

      let pathParams = {
        'packing_list_id': packingListId
      };
      let queryParams = {
      };
      let headerParams = {
        'access-key': accessKey
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/api/v0/packing_list/{packing_list_id}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Update Packing List
     * @param {module:model/PackingListRequest} packingListRequest 
     * @param {String} packingListId 
     * @param {String} accessKey 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object}
     */
    updatePackingListApiV0PackingListPackingListIdPost(packingListRequest, packingListId, accessKey) {
      return this.updatePackingListApiV0PackingListPackingListIdPostWithHttpInfo(packingListRequest, packingListId, accessKey)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update Trip Plan
     * @param {module:model/TripPlanRequest} tripPlanRequest 
     * @param {String} tripPlanId 
     * @param {String} accessKey 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object} and HTTP response
     */
    updateTripPlanApiV0TripPlanTripPlanIdPostWithHttpInfo(tripPlanRequest, tripPlanId, accessKey) {
      let postBody = tripPlanRequest;
      // verify the required parameter 'tripPlanRequest' is set
      if (tripPlanRequest === undefined || tripPlanRequest === null) {
        throw new Error("Missing the required parameter 'tripPlanRequest' when calling updateTripPlanApiV0TripPlanTripPlanIdPost");
      }
      // verify the required parameter 'tripPlanId' is set
      if (tripPlanId === undefined || tripPlanId === null) {
        throw new Error("Missing the required parameter 'tripPlanId' when calling updateTripPlanApiV0TripPlanTripPlanIdPost");
      }
      // verify the required parameter 'accessKey' is set
      if (accessKey === undefined || accessKey === null) {
        throw new Error("Missing the required parameter 'accessKey' when calling updateTripPlanApiV0TripPlanTripPlanIdPost");
      }

      let pathParams = {
        'trip_plan_id': tripPlanId
      };
      let queryParams = {
      };
      let headerParams = {
        'access-key': accessKey
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/api/v0/trip_plan/{trip_plan_id}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Update Trip Plan
     * @param {module:model/TripPlanRequest} tripPlanRequest 
     * @param {String} tripPlanId 
     * @param {String} accessKey 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object}
     */
    updateTripPlanApiV0TripPlanTripPlanIdPost(tripPlanRequest, tripPlanId, accessKey) {
      return this.updateTripPlanApiV0TripPlanTripPlanIdPostWithHttpInfo(tripPlanRequest, tripPlanId, accessKey)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Userinfo
     * @param {String} accessKey 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object} and HTTP response
     */
    userinfoApiV0UserinfoGetWithHttpInfo(accessKey) {
      let postBody = null;
      // verify the required parameter 'accessKey' is set
      if (accessKey === undefined || accessKey === null) {
        throw new Error("Missing the required parameter 'accessKey' when calling userinfoApiV0UserinfoGet");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'access-key': accessKey
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/api/v0/userinfo', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Userinfo
     * @param {String} accessKey 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object}
     */
    userinfoApiV0UserinfoGet(accessKey) {
      return this.userinfoApiV0UserinfoGetWithHttpInfo(accessKey)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
