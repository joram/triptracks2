/**
 * FastAPI
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from './ApiClient';
import AccessKeyRequest from './model/AccessKeyRequest';
import Alerts from './model/Alerts';
import Avalanche from './model/Avalanche';
import AvalancheForecastLayer from './model/AvalancheForecastLayer';
import CurrentConditions from './model/CurrentConditions';
import DailyForecast from './model/DailyForecast';
import Dates from './model/Dates';
import Forecast from './model/Forecast';
import HTTPValidationError from './model/HTTPValidationError';
import HourlyForecast from './model/HourlyForecast';
import ListOfStrings from './model/ListOfStrings';
import LocationInner from './model/LocationInner';
import PackingListRequest from './model/PackingListRequest';
import TripPlanDate from './model/TripPlanDate';
import TripPlanRequest from './model/TripPlanRequest';
import UnitlessStringValue from './model/UnitlessStringValue';
import UnitlessValue from './model/UnitlessValue';
import ValidationError from './model/ValidationError';
import Value from './model/Value';
import Weather from './model/Weather';
import DefaultApi from './triptracks/DefaultApi';


/**
* JS API client generated by OpenAPI Generator.<br>
* The <code>index</code> module provides access to constructors for all the classes which comprise the public API.
* <p>
* An AMD (recommended!) or CommonJS application will generally do something equivalent to the following:
* <pre>
* var Triptracks = require('index'); // See note below*.
* var xxxSvc = new Triptracks.XxxApi(); // Allocate the API class we're going to use.
* var yyyModel = new Triptracks.Yyy(); // Construct a model instance.
* yyyModel.someProperty = 'someValue';
* ...
* var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
* ...
* </pre>
* <em>*NOTE: For a top-level AMD script, use require(['index'], function(){...})
* and put the application logic within the callback function.</em>
* </p>
* <p>
* A non-AMD browser application (discouraged) might do something like this:
* <pre>
* var xxxSvc = new Triptracks.XxxApi(); // Allocate the API class we're going to use.
* var yyy = new Triptracks.Yyy(); // Construct a model instance.
* yyyModel.someProperty = 'someValue';
* ...
* var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
* ...
* </pre>
* </p>
* @module index
* @version 0.1.0
*/
export {
    /**
     * The ApiClient constructor.
     * @property {module:ApiClient}
     */
    ApiClient,

    /**
     * The AccessKeyRequest model constructor.
     * @property {module:model/AccessKeyRequest}
     */
    AccessKeyRequest,

    /**
     * The Alerts model constructor.
     * @property {module:model/Alerts}
     */
    Alerts,

    /**
     * The Avalanche model constructor.
     * @property {module:model/Avalanche}
     */
    Avalanche,

    /**
     * The AvalancheForecastLayer model constructor.
     * @property {module:model/AvalancheForecastLayer}
     */
    AvalancheForecastLayer,

    /**
     * The CurrentConditions model constructor.
     * @property {module:model/CurrentConditions}
     */
    CurrentConditions,

    /**
     * The DailyForecast model constructor.
     * @property {module:model/DailyForecast}
     */
    DailyForecast,

    /**
     * The Dates model constructor.
     * @property {module:model/Dates}
     */
    Dates,

    /**
     * The Forecast model constructor.
     * @property {module:model/Forecast}
     */
    Forecast,

    /**
     * The HTTPValidationError model constructor.
     * @property {module:model/HTTPValidationError}
     */
    HTTPValidationError,

    /**
     * The HourlyForecast model constructor.
     * @property {module:model/HourlyForecast}
     */
    HourlyForecast,

    /**
     * The ListOfStrings model constructor.
     * @property {module:model/ListOfStrings}
     */
    ListOfStrings,

    /**
     * The LocationInner model constructor.
     * @property {module:model/LocationInner}
     */
    LocationInner,

    /**
     * The PackingListRequest model constructor.
     * @property {module:model/PackingListRequest}
     */
    PackingListRequest,

    /**
     * The TripPlanDate model constructor.
     * @property {module:model/TripPlanDate}
     */
    TripPlanDate,

    /**
     * The TripPlanRequest model constructor.
     * @property {module:model/TripPlanRequest}
     */
    TripPlanRequest,

    /**
     * The UnitlessStringValue model constructor.
     * @property {module:model/UnitlessStringValue}
     */
    UnitlessStringValue,

    /**
     * The UnitlessValue model constructor.
     * @property {module:model/UnitlessValue}
     */
    UnitlessValue,

    /**
     * The ValidationError model constructor.
     * @property {module:model/ValidationError}
     */
    ValidationError,

    /**
     * The Value model constructor.
     * @property {module:model/Value}
     */
    Value,

    /**
     * The Weather model constructor.
     * @property {module:model/Weather}
     */
    Weather,

    /**
    * The DefaultApi service constructor.
    * @property {module:triptracks/DefaultApi}
    */
    DefaultApi
};
