/**
 * FastAPI
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Alerts from './Alerts';
import CurrentConditions from './CurrentConditions';
import DailyForecast from './DailyForecast';
import HourlyForecast from './HourlyForecast';

/**
 * The Weather model module.
 * @module model/Weather
 * @version 0.1.0
 */
class Weather {
    /**
     * Constructs a new <code>Weather</code>.
     * @alias module:model/Weather
     * @param currentConditions {module:model/CurrentConditions} 
     * @param dailyForecasts {Array.<module:model/DailyForecast>} 
     * @param hourlyForecasts {Array.<module:model/HourlyForecast>} 
     * @param alerts {module:model/Alerts} 
     */
    constructor(currentConditions, dailyForecasts, hourlyForecasts, alerts) { 
        
        Weather.initialize(this, currentConditions, dailyForecasts, hourlyForecasts, alerts);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, currentConditions, dailyForecasts, hourlyForecasts, alerts) { 
        obj['current_conditions'] = currentConditions;
        obj['daily_forecasts'] = dailyForecasts;
        obj['hourly_forecasts'] = hourlyForecasts;
        obj['alerts'] = alerts;
    }

    /**
     * Constructs a <code>Weather</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Weather} obj Optional instance to populate.
     * @return {module:model/Weather} The populated <code>Weather</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Weather();

            if (data.hasOwnProperty('current_conditions')) {
                obj['current_conditions'] = CurrentConditions.constructFromObject(data['current_conditions']);
            }
            if (data.hasOwnProperty('daily_forecasts')) {
                obj['daily_forecasts'] = ApiClient.convertToType(data['daily_forecasts'], [DailyForecast]);
            }
            if (data.hasOwnProperty('hourly_forecasts')) {
                obj['hourly_forecasts'] = ApiClient.convertToType(data['hourly_forecasts'], [HourlyForecast]);
            }
            if (data.hasOwnProperty('alerts')) {
                obj['alerts'] = Alerts.constructFromObject(data['alerts']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Weather</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Weather</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Weather.RequiredProperties) {
            if (!data[property]) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `current_conditions`
        if (data['current_conditions']) { // data not null
          CurrentConditions.validateJSON(data['current_conditions']);
        }
        if (data['daily_forecasts']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['daily_forecasts'])) {
                throw new Error("Expected the field `daily_forecasts` to be an array in the JSON data but got " + data['daily_forecasts']);
            }
            // validate the optional field `daily_forecasts` (array)
            for (const item of data['daily_forecasts']) {
                DailyForecast.validateJSON(item);
            };
        }
        if (data['hourly_forecasts']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['hourly_forecasts'])) {
                throw new Error("Expected the field `hourly_forecasts` to be an array in the JSON data but got " + data['hourly_forecasts']);
            }
            // validate the optional field `hourly_forecasts` (array)
            for (const item of data['hourly_forecasts']) {
                HourlyForecast.validateJSON(item);
            };
        }
        // validate the optional field `alerts`
        if (data['alerts']) { // data not null
          Alerts.validateJSON(data['alerts']);
        }

        return true;
    }


}

Weather.RequiredProperties = ["current_conditions", "daily_forecasts", "hourly_forecasts", "alerts"];

/**
 * @member {module:model/CurrentConditions} current_conditions
 */
Weather.prototype['current_conditions'] = undefined;

/**
 * @member {Array.<module:model/DailyForecast>} daily_forecasts
 */
Weather.prototype['daily_forecasts'] = undefined;

/**
 * @member {Array.<module:model/HourlyForecast>} hourly_forecasts
 */
Weather.prototype['hourly_forecasts'] = undefined;

/**
 * @member {module:model/Alerts} alerts
 */
Weather.prototype['alerts'] = undefined;






export default Weather;

