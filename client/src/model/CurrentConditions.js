/**
 * FastAPI
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import UnitlessStringValue from './UnitlessStringValue';
import UnitlessValue from './UnitlessValue';
import Value from './Value';

/**
 * The CurrentConditions model module.
 * @module model/CurrentConditions
 * @version 0.1.0
 */
class CurrentConditions {
    /**
     * Constructs a new <code>CurrentConditions</code>.
     * @alias module:model/CurrentConditions
     * @param temperature {module:model/Value} 
     * @param dewpoint {module:model/Value} 
     * @param windChill {module:model/UnitlessValue} 
     * @param humidex {module:model/UnitlessValue} 
     * @param pressure {module:model/Value} 
     * @param tendency {module:model/UnitlessStringValue} 
     * @param humidity {module:model/Value} 
     * @param visibility {module:model/Value} 
     * @param condition {module:model/UnitlessStringValue} 
     * @param windSpeed {module:model/Value} 
     * @param windGust {module:model/UnitlessValue} 
     * @param windDir {module:model/UnitlessStringValue} 
     * @param windBearing {module:model/Value} 
     * @param highTemp {module:model/Value} 
     * @param lowTemp {module:model/Value} 
     * @param uvIndex {module:model/UnitlessValue} 
     * @param pop {module:model/UnitlessValue} 
     * @param iconCode {module:model/UnitlessValue} 
     * @param precipYesterday {module:model/Value} 
     * @param normalHigh {module:model/Value} 
     * @param normalLow {module:model/Value} 
     * @param textSummary {module:model/UnitlessStringValue} 
     */
    constructor(temperature, dewpoint, windChill, humidex, pressure, tendency, humidity, visibility, condition, windSpeed, windGust, windDir, windBearing, highTemp, lowTemp, uvIndex, pop, iconCode, precipYesterday, normalHigh, normalLow, textSummary) { 
        
        CurrentConditions.initialize(this, temperature, dewpoint, windChill, humidex, pressure, tendency, humidity, visibility, condition, windSpeed, windGust, windDir, windBearing, highTemp, lowTemp, uvIndex, pop, iconCode, precipYesterday, normalHigh, normalLow, textSummary);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, temperature, dewpoint, windChill, humidex, pressure, tendency, humidity, visibility, condition, windSpeed, windGust, windDir, windBearing, highTemp, lowTemp, uvIndex, pop, iconCode, precipYesterday, normalHigh, normalLow, textSummary) { 
        obj['temperature'] = temperature;
        obj['dewpoint'] = dewpoint;
        obj['wind_chill'] = windChill;
        obj['humidex'] = humidex;
        obj['pressure'] = pressure;
        obj['tendency'] = tendency;
        obj['humidity'] = humidity;
        obj['visibility'] = visibility;
        obj['condition'] = condition;
        obj['wind_speed'] = windSpeed;
        obj['wind_gust'] = windGust;
        obj['wind_dir'] = windDir;
        obj['wind_bearing'] = windBearing;
        obj['high_temp'] = highTemp;
        obj['low_temp'] = lowTemp;
        obj['uv_index'] = uvIndex;
        obj['pop'] = pop;
        obj['icon_code'] = iconCode;
        obj['precip_yesterday'] = precipYesterday;
        obj['normal_high'] = normalHigh;
        obj['normal_low'] = normalLow;
        obj['text_summary'] = textSummary;
    }

    /**
     * Constructs a <code>CurrentConditions</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CurrentConditions} obj Optional instance to populate.
     * @return {module:model/CurrentConditions} The populated <code>CurrentConditions</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CurrentConditions();

            if (data.hasOwnProperty('temperature')) {
                obj['temperature'] = Value.constructFromObject(data['temperature']);
            }
            if (data.hasOwnProperty('dewpoint')) {
                obj['dewpoint'] = Value.constructFromObject(data['dewpoint']);
            }
            if (data.hasOwnProperty('wind_chill')) {
                obj['wind_chill'] = UnitlessValue.constructFromObject(data['wind_chill']);
            }
            if (data.hasOwnProperty('humidex')) {
                obj['humidex'] = UnitlessValue.constructFromObject(data['humidex']);
            }
            if (data.hasOwnProperty('pressure')) {
                obj['pressure'] = Value.constructFromObject(data['pressure']);
            }
            if (data.hasOwnProperty('tendency')) {
                obj['tendency'] = UnitlessStringValue.constructFromObject(data['tendency']);
            }
            if (data.hasOwnProperty('humidity')) {
                obj['humidity'] = Value.constructFromObject(data['humidity']);
            }
            if (data.hasOwnProperty('visibility')) {
                obj['visibility'] = Value.constructFromObject(data['visibility']);
            }
            if (data.hasOwnProperty('condition')) {
                obj['condition'] = UnitlessStringValue.constructFromObject(data['condition']);
            }
            if (data.hasOwnProperty('wind_speed')) {
                obj['wind_speed'] = Value.constructFromObject(data['wind_speed']);
            }
            if (data.hasOwnProperty('wind_gust')) {
                obj['wind_gust'] = UnitlessValue.constructFromObject(data['wind_gust']);
            }
            if (data.hasOwnProperty('wind_dir')) {
                obj['wind_dir'] = UnitlessStringValue.constructFromObject(data['wind_dir']);
            }
            if (data.hasOwnProperty('wind_bearing')) {
                obj['wind_bearing'] = Value.constructFromObject(data['wind_bearing']);
            }
            if (data.hasOwnProperty('high_temp')) {
                obj['high_temp'] = Value.constructFromObject(data['high_temp']);
            }
            if (data.hasOwnProperty('low_temp')) {
                obj['low_temp'] = Value.constructFromObject(data['low_temp']);
            }
            if (data.hasOwnProperty('uv_index')) {
                obj['uv_index'] = UnitlessValue.constructFromObject(data['uv_index']);
            }
            if (data.hasOwnProperty('pop')) {
                obj['pop'] = UnitlessValue.constructFromObject(data['pop']);
            }
            if (data.hasOwnProperty('icon_code')) {
                obj['icon_code'] = UnitlessValue.constructFromObject(data['icon_code']);
            }
            if (data.hasOwnProperty('precip_yesterday')) {
                obj['precip_yesterday'] = Value.constructFromObject(data['precip_yesterday']);
            }
            if (data.hasOwnProperty('normal_high')) {
                obj['normal_high'] = Value.constructFromObject(data['normal_high']);
            }
            if (data.hasOwnProperty('normal_low')) {
                obj['normal_low'] = Value.constructFromObject(data['normal_low']);
            }
            if (data.hasOwnProperty('text_summary')) {
                obj['text_summary'] = UnitlessStringValue.constructFromObject(data['text_summary']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CurrentConditions</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CurrentConditions</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of CurrentConditions.RequiredProperties) {
            if (!data[property]) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `temperature`
        if (data['temperature']) { // data not null
          Value.validateJSON(data['temperature']);
        }
        // validate the optional field `dewpoint`
        if (data['dewpoint']) { // data not null
          Value.validateJSON(data['dewpoint']);
        }
        // validate the optional field `wind_chill`
        if (data['wind_chill']) { // data not null
          UnitlessValue.validateJSON(data['wind_chill']);
        }
        // validate the optional field `humidex`
        if (data['humidex']) { // data not null
          UnitlessValue.validateJSON(data['humidex']);
        }
        // validate the optional field `pressure`
        if (data['pressure']) { // data not null
          Value.validateJSON(data['pressure']);
        }
        // validate the optional field `tendency`
        if (data['tendency']) { // data not null
          UnitlessStringValue.validateJSON(data['tendency']);
        }
        // validate the optional field `humidity`
        if (data['humidity']) { // data not null
          Value.validateJSON(data['humidity']);
        }
        // validate the optional field `visibility`
        if (data['visibility']) { // data not null
          Value.validateJSON(data['visibility']);
        }
        // validate the optional field `condition`
        if (data['condition']) { // data not null
          UnitlessStringValue.validateJSON(data['condition']);
        }
        // validate the optional field `wind_speed`
        if (data['wind_speed']) { // data not null
          Value.validateJSON(data['wind_speed']);
        }
        // validate the optional field `wind_gust`
        if (data['wind_gust']) { // data not null
          UnitlessValue.validateJSON(data['wind_gust']);
        }
        // validate the optional field `wind_dir`
        if (data['wind_dir']) { // data not null
          UnitlessStringValue.validateJSON(data['wind_dir']);
        }
        // validate the optional field `wind_bearing`
        if (data['wind_bearing']) { // data not null
          Value.validateJSON(data['wind_bearing']);
        }
        // validate the optional field `high_temp`
        if (data['high_temp']) { // data not null
          Value.validateJSON(data['high_temp']);
        }
        // validate the optional field `low_temp`
        if (data['low_temp']) { // data not null
          Value.validateJSON(data['low_temp']);
        }
        // validate the optional field `uv_index`
        if (data['uv_index']) { // data not null
          UnitlessValue.validateJSON(data['uv_index']);
        }
        // validate the optional field `pop`
        if (data['pop']) { // data not null
          UnitlessValue.validateJSON(data['pop']);
        }
        // validate the optional field `icon_code`
        if (data['icon_code']) { // data not null
          UnitlessValue.validateJSON(data['icon_code']);
        }
        // validate the optional field `precip_yesterday`
        if (data['precip_yesterday']) { // data not null
          Value.validateJSON(data['precip_yesterday']);
        }
        // validate the optional field `normal_high`
        if (data['normal_high']) { // data not null
          Value.validateJSON(data['normal_high']);
        }
        // validate the optional field `normal_low`
        if (data['normal_low']) { // data not null
          Value.validateJSON(data['normal_low']);
        }
        // validate the optional field `text_summary`
        if (data['text_summary']) { // data not null
          UnitlessStringValue.validateJSON(data['text_summary']);
        }

        return true;
    }


}

CurrentConditions.RequiredProperties = ["temperature", "dewpoint", "wind_chill", "humidex", "pressure", "tendency", "humidity", "visibility", "condition", "wind_speed", "wind_gust", "wind_dir", "wind_bearing", "high_temp", "low_temp", "uv_index", "pop", "icon_code", "precip_yesterday", "normal_high", "normal_low", "text_summary"];

/**
 * @member {module:model/Value} temperature
 */
CurrentConditions.prototype['temperature'] = undefined;

/**
 * @member {module:model/Value} dewpoint
 */
CurrentConditions.prototype['dewpoint'] = undefined;

/**
 * @member {module:model/UnitlessValue} wind_chill
 */
CurrentConditions.prototype['wind_chill'] = undefined;

/**
 * @member {module:model/UnitlessValue} humidex
 */
CurrentConditions.prototype['humidex'] = undefined;

/**
 * @member {module:model/Value} pressure
 */
CurrentConditions.prototype['pressure'] = undefined;

/**
 * @member {module:model/UnitlessStringValue} tendency
 */
CurrentConditions.prototype['tendency'] = undefined;

/**
 * @member {module:model/Value} humidity
 */
CurrentConditions.prototype['humidity'] = undefined;

/**
 * @member {module:model/Value} visibility
 */
CurrentConditions.prototype['visibility'] = undefined;

/**
 * @member {module:model/UnitlessStringValue} condition
 */
CurrentConditions.prototype['condition'] = undefined;

/**
 * @member {module:model/Value} wind_speed
 */
CurrentConditions.prototype['wind_speed'] = undefined;

/**
 * @member {module:model/UnitlessValue} wind_gust
 */
CurrentConditions.prototype['wind_gust'] = undefined;

/**
 * @member {module:model/UnitlessStringValue} wind_dir
 */
CurrentConditions.prototype['wind_dir'] = undefined;

/**
 * @member {module:model/Value} wind_bearing
 */
CurrentConditions.prototype['wind_bearing'] = undefined;

/**
 * @member {module:model/Value} high_temp
 */
CurrentConditions.prototype['high_temp'] = undefined;

/**
 * @member {module:model/Value} low_temp
 */
CurrentConditions.prototype['low_temp'] = undefined;

/**
 * @member {module:model/UnitlessValue} uv_index
 */
CurrentConditions.prototype['uv_index'] = undefined;

/**
 * @member {module:model/UnitlessValue} pop
 */
CurrentConditions.prototype['pop'] = undefined;

/**
 * @member {module:model/UnitlessValue} icon_code
 */
CurrentConditions.prototype['icon_code'] = undefined;

/**
 * @member {module:model/Value} precip_yesterday
 */
CurrentConditions.prototype['precip_yesterday'] = undefined;

/**
 * @member {module:model/Value} normal_high
 */
CurrentConditions.prototype['normal_high'] = undefined;

/**
 * @member {module:model/Value} normal_low
 */
CurrentConditions.prototype['normal_low'] = undefined;

/**
 * @member {module:model/UnitlessStringValue} text_summary
 */
CurrentConditions.prototype['text_summary'] = undefined;






export default CurrentConditions;

