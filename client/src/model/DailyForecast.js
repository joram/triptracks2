/**
 * FastAPI
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The DailyForecast model module.
 * @module model/DailyForecast
 * @version 0.1.0
 */
class DailyForecast {
    /**
     * Constructs a new <code>DailyForecast</code>.
     * @alias module:model/DailyForecast
     * @param iconCode {String} 
     * @param period {String} 
     * @param precipProbability {Number} 
     * @param temperature {Number} 
     * @param temperatureClass {String} 
     * @param textSummary {String} 
     */
    constructor(iconCode, period, precipProbability, temperature, temperatureClass, textSummary) { 
        
        DailyForecast.initialize(this, iconCode, period, precipProbability, temperature, temperatureClass, textSummary);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, iconCode, period, precipProbability, temperature, temperatureClass, textSummary) { 
        obj['icon_code'] = iconCode;
        obj['period'] = period;
        obj['precip_probability'] = precipProbability;
        obj['temperature'] = temperature;
        obj['temperature_class'] = temperatureClass;
        obj['text_summary'] = textSummary;
    }

    /**
     * Constructs a <code>DailyForecast</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/DailyForecast} obj Optional instance to populate.
     * @return {module:model/DailyForecast} The populated <code>DailyForecast</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new DailyForecast();

            if (data.hasOwnProperty('icon_code')) {
                obj['icon_code'] = ApiClient.convertToType(data['icon_code'], 'String');
            }
            if (data.hasOwnProperty('period')) {
                obj['period'] = ApiClient.convertToType(data['period'], 'String');
            }
            if (data.hasOwnProperty('precip_probability')) {
                obj['precip_probability'] = ApiClient.convertToType(data['precip_probability'], 'Number');
            }
            if (data.hasOwnProperty('temperature')) {
                obj['temperature'] = ApiClient.convertToType(data['temperature'], 'Number');
            }
            if (data.hasOwnProperty('temperature_class')) {
                obj['temperature_class'] = ApiClient.convertToType(data['temperature_class'], 'String');
            }
            if (data.hasOwnProperty('text_summary')) {
                obj['text_summary'] = ApiClient.convertToType(data['text_summary'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>DailyForecast</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>DailyForecast</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of DailyForecast.RequiredProperties) {
            if (!data[property]) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['icon_code'] && !(typeof data['icon_code'] === 'string' || data['icon_code'] instanceof String)) {
            throw new Error("Expected the field `icon_code` to be a primitive type in the JSON string but got " + data['icon_code']);
        }
        // ensure the json data is a string
        if (data['period'] && !(typeof data['period'] === 'string' || data['period'] instanceof String)) {
            throw new Error("Expected the field `period` to be a primitive type in the JSON string but got " + data['period']);
        }
        // ensure the json data is a string
        if (data['temperature_class'] && !(typeof data['temperature_class'] === 'string' || data['temperature_class'] instanceof String)) {
            throw new Error("Expected the field `temperature_class` to be a primitive type in the JSON string but got " + data['temperature_class']);
        }
        // ensure the json data is a string
        if (data['text_summary'] && !(typeof data['text_summary'] === 'string' || data['text_summary'] instanceof String)) {
            throw new Error("Expected the field `text_summary` to be a primitive type in the JSON string but got " + data['text_summary']);
        }

        return true;
    }


}

DailyForecast.RequiredProperties = ["icon_code", "period", "precip_probability", "temperature", "temperature_class", "text_summary"];

/**
 * @member {String} icon_code
 */
DailyForecast.prototype['icon_code'] = undefined;

/**
 * @member {String} period
 */
DailyForecast.prototype['period'] = undefined;

/**
 * @member {Number} precip_probability
 */
DailyForecast.prototype['precip_probability'] = undefined;

/**
 * @member {Number} temperature
 */
DailyForecast.prototype['temperature'] = undefined;

/**
 * @member {String} temperature_class
 */
DailyForecast.prototype['temperature_class'] = undefined;

/**
 * @member {String} text_summary
 */
DailyForecast.prototype['text_summary'] = undefined;






export default DailyForecast;

