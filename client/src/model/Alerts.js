/**
 * FastAPI
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ListOfStrings from './ListOfStrings';

/**
 * The Alerts model module.
 * @module model/Alerts
 * @version 0.1.0
 */
class Alerts {
    /**
     * Constructs a new <code>Alerts</code>.
     * @alias module:model/Alerts
     * @param advisories {module:model/ListOfStrings} 
     * @param endings {module:model/ListOfStrings} 
     * @param statements {module:model/ListOfStrings} 
     * @param warnings {module:model/ListOfStrings} 
     * @param watches {module:model/ListOfStrings} 
     */
    constructor(advisories, endings, statements, warnings, watches) { 
        
        Alerts.initialize(this, advisories, endings, statements, warnings, watches);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, advisories, endings, statements, warnings, watches) { 
        obj['advisories'] = advisories;
        obj['endings'] = endings;
        obj['statements'] = statements;
        obj['warnings'] = warnings;
        obj['watches'] = watches;
    }

    /**
     * Constructs a <code>Alerts</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Alerts} obj Optional instance to populate.
     * @return {module:model/Alerts} The populated <code>Alerts</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Alerts();

            if (data.hasOwnProperty('advisories')) {
                obj['advisories'] = ListOfStrings.constructFromObject(data['advisories']);
            }
            if (data.hasOwnProperty('endings')) {
                obj['endings'] = ListOfStrings.constructFromObject(data['endings']);
            }
            if (data.hasOwnProperty('statements')) {
                obj['statements'] = ListOfStrings.constructFromObject(data['statements']);
            }
            if (data.hasOwnProperty('warnings')) {
                obj['warnings'] = ListOfStrings.constructFromObject(data['warnings']);
            }
            if (data.hasOwnProperty('watches')) {
                obj['watches'] = ListOfStrings.constructFromObject(data['watches']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Alerts</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Alerts</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Alerts.RequiredProperties) {
            if (!data[property]) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `advisories`
        if (data['advisories']) { // data not null
          ListOfStrings.validateJSON(data['advisories']);
        }
        // validate the optional field `endings`
        if (data['endings']) { // data not null
          ListOfStrings.validateJSON(data['endings']);
        }
        // validate the optional field `statements`
        if (data['statements']) { // data not null
          ListOfStrings.validateJSON(data['statements']);
        }
        // validate the optional field `warnings`
        if (data['warnings']) { // data not null
          ListOfStrings.validateJSON(data['warnings']);
        }
        // validate the optional field `watches`
        if (data['watches']) { // data not null
          ListOfStrings.validateJSON(data['watches']);
        }

        return true;
    }


}

Alerts.RequiredProperties = ["advisories", "endings", "statements", "warnings", "watches"];

/**
 * @member {module:model/ListOfStrings} advisories
 */
Alerts.prototype['advisories'] = undefined;

/**
 * @member {module:model/ListOfStrings} endings
 */
Alerts.prototype['endings'] = undefined;

/**
 * @member {module:model/ListOfStrings} statements
 */
Alerts.prototype['statements'] = undefined;

/**
 * @member {module:model/ListOfStrings} warnings
 */
Alerts.prototype['warnings'] = undefined;

/**
 * @member {module:model/ListOfStrings} watches
 */
Alerts.prototype['watches'] = undefined;






export default Alerts;

