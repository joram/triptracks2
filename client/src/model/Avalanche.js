/**
 * FastAPI
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AvalancheForecastLayer from './AvalancheForecastLayer';

/**
 * The Avalanche model module.
 * @module model/Avalanche
 * @version 0.1.0
 */
class Avalanche {
    /**
     * Constructs a new <code>Avalanche</code>.
     * @alias module:model/Avalanche
     * @param title {String} 
     * @param dateIssued {String} 
     * @param validUntil {String} 
     * @param forecaster {String} 
     * @param summary {String} 
     * @param layers {Array.<module:model/AvalancheForecastLayer>} 
     * @param confidence {String} 
     * @param advice {Array.<String>} 
     */
    constructor(title, dateIssued, validUntil, forecaster, summary, layers, confidence, advice) { 
        
        Avalanche.initialize(this, title, dateIssued, validUntil, forecaster, summary, layers, confidence, advice);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, title, dateIssued, validUntil, forecaster, summary, layers, confidence, advice) { 
        obj['title'] = title;
        obj['date_issued'] = dateIssued;
        obj['valid_until'] = validUntil;
        obj['forecaster'] = forecaster;
        obj['summary'] = summary;
        obj['layers'] = layers;
        obj['confidence'] = confidence;
        obj['advice'] = advice;
    }

    /**
     * Constructs a <code>Avalanche</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Avalanche} obj Optional instance to populate.
     * @return {module:model/Avalanche} The populated <code>Avalanche</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Avalanche();

            if (data.hasOwnProperty('title')) {
                obj['title'] = ApiClient.convertToType(data['title'], 'String');
            }
            if (data.hasOwnProperty('date_issued')) {
                obj['date_issued'] = ApiClient.convertToType(data['date_issued'], 'String');
            }
            if (data.hasOwnProperty('valid_until')) {
                obj['valid_until'] = ApiClient.convertToType(data['valid_until'], 'String');
            }
            if (data.hasOwnProperty('forecaster')) {
                obj['forecaster'] = ApiClient.convertToType(data['forecaster'], 'String');
            }
            if (data.hasOwnProperty('summary')) {
                obj['summary'] = ApiClient.convertToType(data['summary'], 'String');
            }
            if (data.hasOwnProperty('layers')) {
                obj['layers'] = ApiClient.convertToType(data['layers'], [AvalancheForecastLayer]);
            }
            if (data.hasOwnProperty('confidence')) {
                obj['confidence'] = ApiClient.convertToType(data['confidence'], 'String');
            }
            if (data.hasOwnProperty('advice')) {
                obj['advice'] = ApiClient.convertToType(data['advice'], ['String']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Avalanche</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Avalanche</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Avalanche.RequiredProperties) {
            if (!data[property]) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['title'] && !(typeof data['title'] === 'string' || data['title'] instanceof String)) {
            throw new Error("Expected the field `title` to be a primitive type in the JSON string but got " + data['title']);
        }
        // ensure the json data is a string
        if (data['date_issued'] && !(typeof data['date_issued'] === 'string' || data['date_issued'] instanceof String)) {
            throw new Error("Expected the field `date_issued` to be a primitive type in the JSON string but got " + data['date_issued']);
        }
        // ensure the json data is a string
        if (data['valid_until'] && !(typeof data['valid_until'] === 'string' || data['valid_until'] instanceof String)) {
            throw new Error("Expected the field `valid_until` to be a primitive type in the JSON string but got " + data['valid_until']);
        }
        // ensure the json data is a string
        if (data['forecaster'] && !(typeof data['forecaster'] === 'string' || data['forecaster'] instanceof String)) {
            throw new Error("Expected the field `forecaster` to be a primitive type in the JSON string but got " + data['forecaster']);
        }
        // ensure the json data is a string
        if (data['summary'] && !(typeof data['summary'] === 'string' || data['summary'] instanceof String)) {
            throw new Error("Expected the field `summary` to be a primitive type in the JSON string but got " + data['summary']);
        }
        if (data['layers']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['layers'])) {
                throw new Error("Expected the field `layers` to be an array in the JSON data but got " + data['layers']);
            }
            // validate the optional field `layers` (array)
            for (const item of data['layers']) {
                AvalancheForecastLayer.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['confidence'] && !(typeof data['confidence'] === 'string' || data['confidence'] instanceof String)) {
            throw new Error("Expected the field `confidence` to be a primitive type in the JSON string but got " + data['confidence']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['advice'])) {
            throw new Error("Expected the field `advice` to be an array in the JSON data but got " + data['advice']);
        }

        return true;
    }


}

Avalanche.RequiredProperties = ["title", "date_issued", "valid_until", "forecaster", "summary", "layers", "confidence", "advice"];

/**
 * @member {String} title
 */
Avalanche.prototype['title'] = undefined;

/**
 * @member {String} date_issued
 */
Avalanche.prototype['date_issued'] = undefined;

/**
 * @member {String} valid_until
 */
Avalanche.prototype['valid_until'] = undefined;

/**
 * @member {String} forecaster
 */
Avalanche.prototype['forecaster'] = undefined;

/**
 * @member {String} summary
 */
Avalanche.prototype['summary'] = undefined;

/**
 * @member {Array.<module:model/AvalancheForecastLayer>} layers
 */
Avalanche.prototype['layers'] = undefined;

/**
 * @member {String} confidence
 */
Avalanche.prototype['confidence'] = undefined;

/**
 * @member {Array.<String>} advice
 */
Avalanche.prototype['advice'] = undefined;






export default Avalanche;

