/**
 * FastAPI
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.Triptracks);
  }
}(this, function(expect, Triptracks) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new Triptracks.CurrentConditions();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('CurrentConditions', function() {
    it('should create an instance of CurrentConditions', function() {
      // uncomment below and update the code to test CurrentConditions
      //var instance = new Triptracks.CurrentConditions();
      //expect(instance).to.be.a(Triptracks.CurrentConditions);
    });

    it('should have the property temperature (base name: "temperature")', function() {
      // uncomment below and update the code to test the property temperature
      //var instance = new Triptracks.CurrentConditions();
      //expect(instance).to.be();
    });

    it('should have the property dewpoint (base name: "dewpoint")', function() {
      // uncomment below and update the code to test the property dewpoint
      //var instance = new Triptracks.CurrentConditions();
      //expect(instance).to.be();
    });

    it('should have the property windChill (base name: "wind_chill")', function() {
      // uncomment below and update the code to test the property windChill
      //var instance = new Triptracks.CurrentConditions();
      //expect(instance).to.be();
    });

    it('should have the property humidex (base name: "humidex")', function() {
      // uncomment below and update the code to test the property humidex
      //var instance = new Triptracks.CurrentConditions();
      //expect(instance).to.be();
    });

    it('should have the property pressure (base name: "pressure")', function() {
      // uncomment below and update the code to test the property pressure
      //var instance = new Triptracks.CurrentConditions();
      //expect(instance).to.be();
    });

    it('should have the property tendency (base name: "tendency")', function() {
      // uncomment below and update the code to test the property tendency
      //var instance = new Triptracks.CurrentConditions();
      //expect(instance).to.be();
    });

    it('should have the property humidity (base name: "humidity")', function() {
      // uncomment below and update the code to test the property humidity
      //var instance = new Triptracks.CurrentConditions();
      //expect(instance).to.be();
    });

    it('should have the property visibility (base name: "visibility")', function() {
      // uncomment below and update the code to test the property visibility
      //var instance = new Triptracks.CurrentConditions();
      //expect(instance).to.be();
    });

    it('should have the property condition (base name: "condition")', function() {
      // uncomment below and update the code to test the property condition
      //var instance = new Triptracks.CurrentConditions();
      //expect(instance).to.be();
    });

    it('should have the property windSpeed (base name: "wind_speed")', function() {
      // uncomment below and update the code to test the property windSpeed
      //var instance = new Triptracks.CurrentConditions();
      //expect(instance).to.be();
    });

    it('should have the property windGust (base name: "wind_gust")', function() {
      // uncomment below and update the code to test the property windGust
      //var instance = new Triptracks.CurrentConditions();
      //expect(instance).to.be();
    });

    it('should have the property windDir (base name: "wind_dir")', function() {
      // uncomment below and update the code to test the property windDir
      //var instance = new Triptracks.CurrentConditions();
      //expect(instance).to.be();
    });

    it('should have the property windBearing (base name: "wind_bearing")', function() {
      // uncomment below and update the code to test the property windBearing
      //var instance = new Triptracks.CurrentConditions();
      //expect(instance).to.be();
    });

    it('should have the property highTemp (base name: "high_temp")', function() {
      // uncomment below and update the code to test the property highTemp
      //var instance = new Triptracks.CurrentConditions();
      //expect(instance).to.be();
    });

    it('should have the property lowTemp (base name: "low_temp")', function() {
      // uncomment below and update the code to test the property lowTemp
      //var instance = new Triptracks.CurrentConditions();
      //expect(instance).to.be();
    });

    it('should have the property uvIndex (base name: "uv_index")', function() {
      // uncomment below and update the code to test the property uvIndex
      //var instance = new Triptracks.CurrentConditions();
      //expect(instance).to.be();
    });

    it('should have the property pop (base name: "pop")', function() {
      // uncomment below and update the code to test the property pop
      //var instance = new Triptracks.CurrentConditions();
      //expect(instance).to.be();
    });

    it('should have the property iconCode (base name: "icon_code")', function() {
      // uncomment below and update the code to test the property iconCode
      //var instance = new Triptracks.CurrentConditions();
      //expect(instance).to.be();
    });

    it('should have the property precipYesterday (base name: "precip_yesterday")', function() {
      // uncomment below and update the code to test the property precipYesterday
      //var instance = new Triptracks.CurrentConditions();
      //expect(instance).to.be();
    });

    it('should have the property normalHigh (base name: "normal_high")', function() {
      // uncomment below and update the code to test the property normalHigh
      //var instance = new Triptracks.CurrentConditions();
      //expect(instance).to.be();
    });

    it('should have the property normalLow (base name: "normal_low")', function() {
      // uncomment below and update the code to test the property normalLow
      //var instance = new Triptracks.CurrentConditions();
      //expect(instance).to.be();
    });

    it('should have the property textSummary (base name: "text_summary")', function() {
      // uncomment below and update the code to test the property textSummary
      //var instance = new Triptracks.CurrentConditions();
      //expect(instance).to.be();
    });

  });

}));
